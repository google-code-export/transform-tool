<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"  
			   xmlns:view="com.vstyran.transform.view.*" 
			   xmlns:model="com.vstyran.transform.model.*"
			   width="460" height="300" xmlns:local="*" 
			   viewSourceURL="http://vstyran-flex.ho.ua/TransformTool2/examples/TransformToolSample13/srcview/index.html" 
			   xmlns:connectors="com.vstyran.transform.connectors.*" xmlns:managers="com.vstyran.transform.managers.*">
	<fx:Script>
		<![CDATA[
			import com.vstyran.transform.events.TransformEvent;
			import com.vstyran.transform.model.DisplayData;
			import com.vstyran.transform.model.MultiDisplayData;
			import com.vstyran.transform.utils.DataUtil;
			
			import mx.core.UIComponent;
			
			protected function select(event:MouseEvent):void
			{
				var targets:Array = connector.targets ? connector.targets : [];
				var index:int = targets ? targets.indexOf(event.target as UIComponent) : -1;
				
				if(index == -1)
				{
					if(event.shiftKey || event.ctrlKey)
					{
						targets.push(event.target as UIComponent);
						connector.targets = targets;		
					}
					else
					{
						connector.target = event.target as UIComponent;
					}
					skipUpHandler = true;
					
					tool.visible = true;
					tool.startMoving(event);
				}
				
			}
			
			
			protected function upHandler(event:MouseEvent):void
			{
				if(!skipUpHandler)
				{
					if((event.shiftKey || event.ctrlKey) && connector.targets.length > 1)
					{
						var targets:Array = connector.targets;
						
						var index:int = targets.indexOf(event.target as UIComponent);
						if(index != -1)
							targets.splice(index, 1);
						
						connector.targets = targets;		
					}
					
					if(!event.shiftKey && !event.ctrlKey)
					{
						connector.target = event.target as UIComponent;
					}
				}
				
				skipUpHandler = false;
			}
			
			private var skipUpHandler:Boolean;
			protected function tool_transformationCompleteHandler(event:TransformEvent):void
			{
				skipUpHandler = true;
			}
			
			protected function designArea_mouseDownHandler(event:MouseEvent):void
			{
				if(event.target != designArea)
					return;
				
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				systemManager.getSandboxRoot().addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				
				startSelectionPoint = designArea.globalToLocal(new Point(event.stageX, event.stageY));
				
				selectionRect.x = startSelectionPoint.x;
				selectionRect.y = startSelectionPoint.y;
				selectionRect.width = 0;
				selectionRect.height = 0;
			}
			
			private var startSelectionPoint:Point;
			protected function mouseMoveHandler(event:MouseEvent):void
			{
				var point:Point = designArea.globalToLocal(new Point(event.stageX, event.stageY));
				
				var minX:Number = Math.min(point.x, startSelectionPoint.x);
				var minY:Number = Math.min(point.y, startSelectionPoint.y);
				var maxX:Number = Math.max(point.x, startSelectionPoint.x);
				var maxY:Number = Math.max(point.y, startSelectionPoint.y);
			
				selectionRect.x = minX;
				selectionRect.y = minY;
				selectionRect.width = maxX - minX;
				selectionRect.height = maxY - minY;
				selectionRect.visible = true;
				skipUpHandler = true;
			}
			
			protected function mouseUpHandler(event:MouseEvent):void
			{
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				systemManager.getSandboxRoot().removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				selectionRect.visible = false;
				
				var data:DisplayData = new DisplayData(selectionRect.x, selectionRect.y, selectionRect.width, selectionRect.height);
				
				var selection:Array = (connector.targets && (event.shiftKey || event.ctrlKey)) ? connector.targets : [];
				
				if(data.containsData(DataUtil.createData(imageTarget1)))
					addTarget(selection, imageTarget1);
				if(data.containsData(DataUtil.createData(imageTarget2)))
					addTarget(selection, imageTarget2);
				if(data.containsData(DataUtil.createData(imageTarget3)))
					addTarget(selection, imageTarget3);
				
				if(selection.length > 0)
				{
					connector.targets = selection;
					tool.visible = true;
				}
				else if(!event.shiftKey && !event.ctrlKey)
				{
					connector.target = null;
					tool.visible = false;
				}
				
				skipUpHandler = false;
			}
			
			private function addTarget(targets:Array, target:UIComponent):void
			{
				var index:int = targets ? targets.indexOf(target) : -1;
				
				if(index == -1)
				{
					targets.push(target);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Group id="designArea" width="460" height="300" verticalCenter="0" horizontalCenter="0"
			 mouseDown="designArea_mouseDownHandler(event)">
		
		<!-- background fill -->
		<s:Rect top="0" right="0" left="0" bottom="0">
			<s:fill>
				<s:SolidColor color="#dddddd"/>
			</s:fill>
		</s:Rect>
		<s:Rect id="border" top="25" right="30" left="30" bottom="25">
			<s:stroke>
				<s:SolidColorStroke color="#ACACAC"/>
			</s:stroke>
		</s:Rect>
		
		<s:Image id="imageTarget1" x="100" y="110" width="80" height="50" rotation="0" scaleMode="stretch" mouseChildren="false"
				 smooth="true" source="@Embed('image1.jpg')" minHeight="20" minWidth="20" mouseDown="select(event)" mouseUp="upHandler(event)"/>
		<s:Image id="imageTarget2" x="180" y="180" width="80" height="50" rotation="0" scaleMode="stretch" mouseChildren="false"
				 smooth="true" source="@Embed('image2.jpg')" minHeight="20" minWidth="20" mouseDown="select(event)" mouseUp="upHandler(event)"/>
		<s:Image id="imageTarget3" x="260" y="110" width="80" height="50" rotation="0" scaleMode="stretch" mouseChildren="false"
				 smooth="true" source="@Embed('image3.jpg')" minHeight="20" minWidth="20" mouseDown="select(event)" mouseUp="upHandler(event)"/>
		
		<view:TransformTool id="tool" depth="3" visible="false" transformation="tool_transformationCompleteHandler(event)">
			<connectors:UIConnector id="connector" padding="5"/>
			<view:bounds>
				<model:Bounds x="30" y="25" width="400" height="250"/>
			</view:bounds>
		</view:TransformTool>
		
		<s:Rect id="selectionRect" visible="false" includeInLayout="false">
			<s:stroke>
				<s:SolidColorStroke color="#3399FF"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="#3399FF" alpha="0.2"/>
			</s:fill>
		</s:Rect>
	</s:Group>
</s:Application>
