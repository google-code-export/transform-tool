<?xml version="1.0" encoding="utf-8"?>                                                                                    
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"                                                                   
			   xmlns:s="library://ns.adobe.com/flex/spark"                                                                
			   xmlns:mx="library://ns.adobe.com/flex/mx"                                                                  
			   xmlns:view="com.vstyran.transform.view.*"                                                                  
			   xmlns:model="com.vstyran.transform.model.*"                                                                
			   width="460" height="300" xmlns:local="*"                                                                   
			   viewSourceURL="http://vstyran-flex.ho.ua/TransformTool2/examples/TransformToolSample11/srcview/index.html" 
			   xmlns:connectors="com.vstyran.transform.connectors.*" xmlns:view1="view.*"
			   creationComplete="updateGuides()">                                                     
	
	<fx:Script>
		<![CDATA[
			import com.vstyran.transform.consts.GuidelineType;
			import com.vstyran.transform.consts.TransformationType;
			import com.vstyran.transform.events.GuidelineEvent;
			import com.vstyran.transform.model.Guideline;
			import com.vstyran.transform.utils.DataUtil;
			import com.vstyran.transform.utils.TransformUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			
			[Bindable]
			private var deletedObjects:ArrayCollection = new ArrayCollection();
			
			protected function group1_clickHandler(event:MouseEvent):void
			{
				if(event.target == designArea)
				{
					deselect();
				}
			}
			
			protected function tool_deleteTargetHandler(event:Event):void
			{
				deletedObjects.addItem(tool.targets[0]);
				designArea.removeElement(tool.targets[0]);
				deselect();
				
			}
			
			private function deselect():void
			{
				tool.targets = null;
				tool.visible = false;
				tool.includeInLayout = false;
			}
			private function select(target:Image, event:MouseEvent):void
			{
				tool.targets = [target];
				tool.visible = true;
				tool.includeInLayout = true;
				updateGuides();
				tool.startMoving(event);
				
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				for each (var image:Image in deletedObjects) 
				{
					designArea.addElement(image);
				}
				
				deletedObjects.removeAll();
			}
			
			protected function updateGuides():void
			{
				var guidelines:Vector.<Guideline> = new Vector.<Guideline>();
				
				for (var i:int = 0; i < designArea.numElements; i++) 
				{
					var element:IVisualElement = designArea.getElementAt(i);
					
					if(element is Image && tool.targets[0] != element)
					{
						
						var box:Rectangle = DataUtil.createData(element as Image).getBoundingBox();
						
						guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x, 3));
						guidelines.push(new Guideline(GuidelineType.VERTICAL_CENTER, box.x+box.width/2, 3));
						guidelines.push(new Guideline(GuidelineType.VERTICAL_EDGE, box.x+box.width, 3));
						
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y, 3));
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_CENTER, box.y+box.height/2, 3));
						guidelines.push(new Guideline(GuidelineType.HORIZONTAL_EDGE, box.y+box.height, 3));
						
						if((element as Image).rotation%90 != 0)
						{
							var guideLine:Guideline = new Guideline(GuidelineType.ROTATION, (element as Image).rotation, 3);
							guideLine.userData = element;
							guidelines.push(guideLine);
						}
					}
				}
				tool.guidelines = guidelines;
			}
			
			protected function tool_guidelinesUpdateHandler(event:GuidelineEvent):void
			{
				if(event.cross && event.cross.vGuideline)
					vGuide.x = event.cross.vGuideline.value;
				vGuide.visible = (event.cross && event.cross.vGuideline);
				
				if(event.cross && event.cross.hGuideline)
					hGuide.y = event.cross.hGuideline.value;
				hGuide.visible = (event.cross && event.cross.hGuideline);
				
				passiveGuideGroup.removeAllElements();
				if(event.cross)
				{
					if(showPassiveGuides.selected)
					{
						for each (var vguide:Guideline in event.cross.getVGuidelines()) 
						{
							var vGuideLine:VGuideLine = new VGuideLine();
							vGuideLine.x = vguide.value;
							passiveGuideGroup.addElement(vGuideLine);
						}
						for each (var hguide:Guideline in event.cross.getHGuidelines()) 
						{
							var hGuideLine:HGuideLine = new HGuideLine();
							hGuideLine.y = hguide.value;
							passiveGuideGroup.addElement(hGuideLine);
						}
					}
					
					if(event.transformationType == TransformationType.ROTATE)
					{
						if(event.cross.rGuideline)
						{
							var rTargetGuideLine:RGuideLine = new RGuideLine();
							rTargetGuideLine.update(tool.targets[0], passiveGuideGroup);
							passiveGuideGroup.addElement(rTargetGuideLine);
						}
							
						for each (var rguide:Guideline in event.cross.getRGuidelines()) 
						{
							var rGuideLine:RGuideLine = new RGuideLine();
							rGuideLine.update(rguide.userData as Image, passiveGuideGroup);
							passiveGuideGroup.addElement(rGuideLine);
						}
					}
				}
			}
		]]>
	</fx:Script>
	
	
	<fx:Declarations>                                                                                                     
		<fx:Component className="VGuideLine">
			<s:Line alpha="0.1" y="45" height="230">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
		<fx:Component className="HGuideLine">
			<s:Line alpha="0.1" x="30" width="400">
				<s:stroke>
					<s:SolidColorStroke/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
		<fx:Component className="RGuideLine">
			<s:Line>
				<fx:Script>
					<![CDATA[
						import com.vstyran.transform.utils.TransformUtil;
						
						import mx.core.UIComponent;
						import spark.components.Group;
						
						public function update(target:UIComponent, passiveGuideGroup:Group):void
						{
							var m:Matrix = TransformUtil.getMatrix(target, passiveGuideGroup);
							
							var stPoimt:Point =  m.transformPoint(new Point(target.width/2, target.height/2));
							var endPoimt:Point =  m.transformPoint(new Point(target.width, target.height/2));
							this.xFrom = stPoimt.x;
							this.yFrom = stPoimt.y;
							this.xTo = endPoimt.x;
							this.yTo = endPoimt.y;
						}
					]]>
				</fx:Script>
				<s:stroke>
					<s:SolidColorStroke color="#AA0000"/>
				</s:stroke>
			</s:Line>
		</fx:Component>                                       
	</fx:Declarations>                                                                                                    
	
	<s:Group id="designArea" width="460" height="300" verticalCenter="0" horizontalCenter="0" click="group1_clickHandler(event)">                                           
		
		<!-- background fill -->                                                                                          
		<s:Rect top="0" right="0" left="0" bottom="0">                                                                    
			<s:fill>                                                                                                      
				<s:SolidColor color="#dddddd"/>                                                                           
			</s:fill>                                                                                                     
		</s:Rect>                                                                                                         
		<s:Rect id="border" top="45" right="30" left="30" bottom="25">                                                    
			<s:stroke>                                                                                                    
				<s:SolidColorStroke color="#ACACAC"/>                                                                     
			</s:stroke>                                                                                                   
		</s:Rect>                                                                                                         
		
		
		<s:Image id="imageTarget1" x="182" y="171" width="78" height="92" rotation="0" scaleMode="stretch"               
				 smooth="true" source="@Embed('image1.png')" minHeight="20" minWidth="20" mouseDown="select(imageTarget1, event)"/>                                
		<s:Image id="imageTarget2" x="55" y="77" width="100" height="83" rotation="0" scaleMode="stretch"               
				 smooth="true" source="@Embed('image2.png')" minHeight="20" minWidth="20" mouseDown="select(imageTarget2, event)"/>                                
		<s:Image id="imageTarget3" x="323" y="89" width="71" height="71" rotation="0" scaleMode="stretch"               
				 smooth="true" source="@Embed('image3.png')" minHeight="20" minWidth="20" mouseDown="select(imageTarget3, event)"/>                                
		
		<view1:CustomUITransformTool id="tool" depth="3" targets="{[imageTarget1]}" 
									 skinClass="skins.CustomUITransformToolSkin" 
									 deleteTarget="tool_deleteTargetHandler(event)"
									 guidelinesUpdate="tool_guidelinesUpdateHandler(event)">       
			<view1:bounds>                                                                                                 
				<model:Bounds x="30" y="45" width="400" height="230"/>                                                    
			</view1:bounds>                                                                                                
		</view1:CustomUITransformTool>                                                                                           
	</s:Group>  
	<s:Group width="460" height="300" verticalCenter="0" horizontalCenter="0">
		<s:Group id="passiveGuideGroup" top="0" bottom="0" left="0" right="0"/>
		<s:Line id="vGuide" yFrom="45" yTo="275" depth="3" visible="false">
			<s:stroke>
				<s:SolidColorStroke color="#AA0000"/>
			</s:stroke>
		</s:Line>
		<s:Line id="hGuide" xFrom="30" xTo="430" depth="3" visible="false">
			<s:stroke>
				<s:SolidColorStroke color="#AA0000"/>
			</s:stroke>
		</s:Line>
		<s:Button x="31" y="10" label="Revert deleted" click="button1_clickHandler(event)" enabled="{deletedObjects.length > 0}"/>
		<s:CheckBox x="274" y="13" id="showPassiveGuides" label="Show passive guidelines" selected="true"/>
	</s:Group>
</s:Application>                                                                                                          
